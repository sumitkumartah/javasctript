
Stephen is tasked to maximize his earnings over a period of N days. He can choose to do either an easy or difficult task each day, or No task . There's a constraint though - he can only perform a difficult task if he didn't do any work on the previous day. The company pays more for difficult tasks but the rates can vary from day to day.
 Find algorithm to help Stephen earn the maximum salary.




CODE:::::::::::::::::::::::::::::::>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

import java.util.Scanner;
class A{
    public static void main(String args[]){
      Scanner sc=new Scanner(System.in);
      //days if Internship
      int n=sc.nextInt();
      
      //types of task is always 2 so there will two arr
      int a[]=new int[n+1];
      int b[]=new int[n+1];
      for(int i=1;i<=n;i++){
          a[i]=sc.nextInt();
          b[i]=sc.nextInt();
      }
      
      int dp[][]=new int[n+1][3];
      maximumSalary(a, b, dp,n);
    }
    
    
    public static void  maximumSalary(int a[], int b[], int dp[][], int n){
        
        // dp[][0]--->easy Task
        // dp[][1]-->hard Task
        // dp[][2]--->No task
        dp[1][0]=Math.min(a[1], b[1]);
        dp[1][1]=Math.max(a[1], b[1]);
        dp[1][2]=0;
        
        for(int i=2;i<=n;i++){
            dp[i][0]=Math.min(a[i], b[i]) + Math.max( dp[i-1][0], Math.max( dp[i-1][1], dp[i-1][2]) );
            
            dp[i][1]=Math.max(a[i], b[i])+ dp[i-1][2];
            
            dp[i][2]=Math.max( dp[i-1][0], Math.max( dp[i-1][1], dp[i-1][2]) );
        }
        
        int ans=Math.max(dp[n][0], Math.max(dp[n][1], dp[n][2]));
        
        System.out.println("Maximum Salary= "+ans);
    }
}



4
1 2
4 10
20 21
2 23
Maximum Salary= 33







